

#include "gtest/gtest.h"
#include <decrypt>
#include <string>

std::string decryptString(const std::string& encrypted, const std::unordered_map<char, char>& decryptionKey);

TEST(DecryptionTests, SimpleStringDecryption) {
    std::unordered_map<char, char> decryptionKey = {
        {'a', 'z'}, {'b', 'y'}, {'c', 'x'}, {'d', 'w'}, {'e', 'v'}, {'f', 'u'},
        {'g', 't'}, {'h', 's'}, {'i', 'r'}, {'j', 'q'}, {'k', 'p'}, {'l', 'o'},
        {'m', 'n'}, {'n', 'm'}, {'o', 'l'}, {'p', 'k'}, {'q', 'j'}, {'r', 'i'},
        {'s', 'h'}, {'t', 'g'}, {'u', 'f'}, {'v', 'e'}, {'w', 'd'}, {'x', 'c'},
        {'y', 'b'}, {'z', 'a'}
    };

    std::string encrypted = "svool dliow";
    std::string expectedDecrypted = "hello world";
    EXPECT_EQ(decryptString(encrypted, decryptionKey), expectedDecrypted);
}

TEST(DecryptionTests, EmptyStringDecryption) {
    std::unordered_map<char, char> decryptionKey = {
        {'a', 'z'}, {'b', 'y'}, {'c', 'x'}, {'d', 'w'}, {'e', 'v'}, {'f', 'u'},
        {'g', 't'}, {'h', 's'}, {'i', 'r'}, {'j', 'q'}, {'k', 'p'}, {'l', 'o'},
        {'m', 'n'}, {'n', 'm'}, {'o', 'l'}, {'p', 'k'}, {'q', 'j'}, {'r', 'i'},
        {'s', 'h'}, {'t', 'g'}, {'u', 'f'}, {'v', 'e'}, {'w', 'd'}, {'x', 'c'},
        {'y', 'b'}, {'z', 'a'}
    };

    std::string encrypted = "";
    std::string expectedDecrypted = "";
    EXPECT_EQ(decryptString(encrypted, decryptionKey), expectedDecrypted);
}

TEST(DecryptionTests, MixedCharactersDecryption) {
    std::unordered_map<char, char> decryptionKey = {
        {'a', 'z'}, {'b', 'y'}, {'c', 'x'}, {'d', 'w'}, {'e', 'v'}, {'f', 'u'},
        {'g', 't'}, {'h', 's'}, {'i', 'r'}, {'j', 'q'}, {'k', 'p'}, {'l', 'o'},
        {'m', 'n'}, {'n', 'm'}, {'o', 'l'}, {'p', 'k'}, {'q', 'j'}, {'r', 'i'},
        {'s', 'h'}, {'t', 'g'}, {'u', 'f'}, {'v', 'e'}, {'w', 'd'}, {'x', 'c'},
        {'y', 'b'}, {'z', 'a'}
    };

    std::string encrypted = "svool dliow! 123"; 
    std::string expectedDecrypted = "hello world! 123";
    EXPECT_EQ(decryptString(encrypted, decryptionKey), expectedDecrypted);
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
